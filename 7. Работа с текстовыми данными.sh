# Ведение в Linux и облачные вычисления
# Урок 7

# Работа с текстовыми данными
# Способы выбора данных из файла. Команды awk, grep, sed. Регулярные выражения


####################################################### Регулярные выражения (РВ)
# примеры
# предложение: начинается с заглавной буквы и заканчивается точкой и пробелом
[A-Z].*\.\s

# слова с ошибками: 0 (ноль) вместо о
\w*0\w*

# ошибки в тексте: Пробел перед запятой или точкой
\s,|\s\.

# ошибки в тексте: двойной пробел
\s\s
\s{2}

# номера телефонов
# примеры:
89992223344
8(999)2223344
+7(999)2223344
+7(999)222-33-44
# РВ
\+?[\d()-]{7,}

# получим поток на вход команды из терминала
# команда sort сортирует строки, введенные пользователем
sort <<stop
> 2
> 11
> 21
> 4
> 10
stop


####################################################### Команда awk
# выведем первые 5 колонок от результата предыдущей команды
ll | awk '{print $1" "$2" "$3" "$4 " "$5}'

# создадим файл с зарплатами
cat > salaries.txt << stop
Петросян программист 100к
Дуров директор 1М
Степанидзе бухгалтер 40к
stop

# выведем только директора
awk '/Дуров/ {print}' salaries.txt

# выведем тех, у кото зарплата 100к
awk '$3=="100к" {print NR,$0}' salaries.txt

# вывести только тех сотрудников, у кого указана зарплата
awk '/ [0-9]+/' salaries.txt

####################################################### Команда grep
man grep

# Команда 'ls /bin' покажет список файлов из директории /bin
ls /bin

ls /bin | grep 'zip'

# Названия файлов из /bin, которые заканчиваются на '2'
ls /bin | grep '2$'

# Названия файлов из /bin, которые начинаются на 'b'
ls /bin | grep '^b'

# Названия файлов из /bin, начинающиеся на 'b' и содержащие в своем имени букву a
ls /bin | grep '^b.*a'

# файлы с именем, не заканчивающимся на txt
ll ~ | grep -v txt$

# файлы и папки, права на которые содержат ------
ll ~ | egrep '\-{6,}'

####################################################### Команда sed
man sed

ls -1 /var/cache

# Замена apt на APT
ls /var/cache/ | sed 's/apt/APT/'

# Замена a на A
ls /var/cache/ | sed 's/a/A/'

# заменим ONE на один без учета регистра (I)
echo ONE TWO | sed "s/one/один/I"

# аналог head
# выведем первые 10 строк в файловой системе
ll | head
# сделаем эквивалент с помощью sed
ll | sed 10q

####################################################### Команда uptime
# предоставляет характеристики по работе системы, ее стабильности, 
# времени без перезагрузок
uptime

# Указанное выражение совпадает со всей строкой и выделяет в подстроку \1 
# число пользователей. Выполнив замену целиком на \1, получим в результате 
# только это число
uptime | sed 's/^.* \([0-9]\+\) \+user.*/\1/'

# Вариант для получения второй подстроки
uptime | sed 's/^.* \([0-9]\+\) \+\(user.*\)/\2/'

# Также можно получить время работы системы (строку вида '123 days, 12:14')
uptime | sed 's/^.* up \+\(.\+\), \+[0-9]\+ \+user.*/\1/'











